// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String?  @unique
  email     String   @unique
  passwordHash String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional timestamps
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?

  // Password reset
  resetPasswordToken    String?
  resetTokenExpiresAt   DateTime?

  // Refresh token versioning for security
  refreshTokenVersion Int @default(0)

  // User preferences
  timezone  String? @default("UTC")
  locale    String? @default("en")

  // Consent tracking
  marketingConsentAt DateTime?
  termsAcceptedAt    DateTime?

  // Relations
  courses     Course[]
  attendance  Attendance[]
  reminders   Reminder[]

  @@map("users")
}

model Course {
  id           String   @id @default(uuid())
  userId       String
  name         String
  code         String?
  teacher      String?
  location     String?
  color        String?  @default("#3B82F6") // Default blue color
  note         String?
  maxAbsences  Int      @default(3)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetings  Meeting[]
  sessions  Session[]
  reminders Reminder[]

  @@map("courses")
}

model Meeting {
  id          String  @id @default(uuid())
  courseId    String
  weekday     Int     // 1=Monday, 7=Sunday
  startHHmm   String  // Format: "14:30"
  durationMin Int     @default(90)
  location    String?
  note        String?

  // Relations
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sessions Session[] @relation("GeneratedFromMeeting")

  @@map("meetings")
}

// Sessions for courses
model Session {
  id        String   @id @default(uuid())
  courseId  String
  meetingId String?  // Optional relation to Meeting that generated this session
  dateTime  DateTime
  duration  Int // in minutes
  source    String   @default("AUTO") // "AUTO" or "MANUAL"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attendance   Attendance[]
  fromMeeting  Meeting?     @relation("GeneratedFromMeeting", fields: [meetingId], references: [id])

  @@map("sessions")
}

model Attendance {
  id        String   @id @default(uuid())
  userId    String
  sessionId String
  status    String   @default("PRESENT") // "PRESENT", "ABSENT", "EXCUSED"
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@map("attendance")
}

model Reminder {
  id              String   @id @default(uuid())
  userId          String
  courseId        String?  // nullable for general reminders
  title           String
  morningOfClass  Boolean  @default(true)
  minutesBefore   Int      @default(60)
  thresholdAlerts Boolean  @default(true)
  cron            String?  // for custom scheduling
  enabled         Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("reminders")
}
